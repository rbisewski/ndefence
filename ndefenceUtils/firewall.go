//
// Firewall utility functions for ndefence
//

package ndefenceUtils

//
// Imports
//
import (
	"fmt"
	"io/ioutil"
	"os"
	"strconv"

	"github.com/rbisewski/ndefence/ndefenceIO"
	"github.com/rbisewski/ndefence/ndefenceServer"
)

// GenerateBlockedCfg ... updates the blocked IP address config file with
//                        new entries, if any
/*
 * @param    string      /path/to/blockedips.cfg
 * @param    string      server type (nginx, apache2, etc)
 * @param    string[]    list of IPv4 addressess to consider blocking
 * @param    string      Datetime, as a string
 *
 * @return   error       error message, if any
 *
 * TODO: test this to ensure it works
 */
func GenerateBlockedCfg(path string, serverType string, ips map[string]int,
	datetime string) error {

	// input validation
	if path == "" || serverType == "" || len(ips) < 1 || datetime == "" {
		return nil
	}

	// TODO: implement functionality to handle Apache servers
	if serverType == "apache" {
		return nil
	}

	lines := ""
	for ip, time := range ips {

		timeStr := strconv.Itoa(time)

		if time == -1 {
			timeStr = "perma"

		} else if time == 0 {
			timeStr = datetime
		}

		lines += "deny " + ip + " # " + timeStr + "\n"
	}

	err := ioutil.WriteFile(path, []byte(lines), 0644)

	// if the file wrote correctly, this will return nil, else this
	// function will return the error message
	return err
}

// GenerateConfig ... spawns a configuration file based on the provided data
/*
 * @param    string      /path/to/config
 * @param    string      server type (nginx, apache2, etc)
 * @param    string[]    list of IPv4 addressess to consider blocking
 * @param    string      Datetime, as a string
 *
 * @return   error       error message, if any
 */
func GenerateConfig(defaultSiteConfigPath string,
	serverType string, blockedIps []string, datetime string) error {

	// input validation
	if len(defaultSiteConfigPath) < 1 || len(serverType) < 1 ||
		len(datetime) < 1 {
		return nil
	}

	// Variables to hold the header / contents of the default site config
	newDefaultSiteConfigHeader := ""
	newDefaultSiteConfigContents := ""

	//
	// Nginx server
	//
	if serverType == "nginx" {

		// Attempt to break up the file into an array of strings a demarked by
		// the newline character.
		siteConfigData, err := ndefenceIO.TokenizeFile(
			defaultSiteConfigPath, "\n")

		// if an error occurs, terminate from the program
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		// reading from the above config string data, attempt to convert
		// the string data to a list of servers
		listOfServers, err :=
			ndefenceServer.ConvertStringsToServers(siteConfigData)

		// if an error occurs, terminate from the program
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		// if there is at least one server...
		for _, server := range listOfServers {

			// verify that the server block was read properly
			if len(server.ServerName) < 1 || len(server.Listen) < 1 {

				// else skip to the next element
				continue
			}

			// if the server block looks good, go ahead and append it
			// to a string
			output, err := ndefenceServer.ConvertServerToString(server)

			// if an error occurred, skip to the next element
			if err != nil {
				continue
			}

			// append the output to the config contents
			if len(output) > 0 {
				newDefaultSiteConfigContents += output
			}
		}

		// if there is at least one line of server config data appended...
		if len(newDefaultSiteConfigContents) > 0 {

			// append the time and date the config was generated
			newDefaultSiteConfigHeader += "#\n"
			newDefaultSiteConfigHeader += "# Nginx Config\n"
			newDefaultSiteConfigHeader += "#\n"
			newDefaultSiteConfigHeader += "# Generated by" +
				"ndefence.\n"
			newDefaultSiteConfigHeader += "#\n"
			newDefaultSiteConfigHeader += "# Date: " + datetime +
				"\n"
			newDefaultSiteConfigHeader += "#\n"

			// attach the header to the config contents
			newDefaultSiteConfigContents =
				newDefaultSiteConfigHeader + newDefaultSiteConfigContents

			// attempt to write it to the file in question
			err = ioutil.WriteFile(defaultSiteConfigPath,
				[]byte(newDefaultSiteConfigContents),
				0644)

			// if an error occurs, terminate from the program
			if err != nil {
				return err
			}

			// have the server restart as well
			_, err := RunNginxReloadCommand()

			// if an error occurs, terminate from the program
			if err != nil {
				return err
			}
		}

		//
		// Apache2 server
		//
	} else if serverType == "apache" {

		// Attempt to break up the file into an array of strings a demarked by
		// the newline character.
		siteConfigData, err := ndefenceIO.TokenizeFile(
			defaultSiteConfigPath, "\n")

		// if an error occurs, terminate from the program
		if err != nil {
			return err
		}

		// TODO: consider implementing this if it is ever needed
		siteConfigData = siteConfigData
	}

	// everything worked fine
	return nil
}
