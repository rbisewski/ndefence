//
// Firewall utility functions for ndefence
//

//
// Package
//
package ndefence_utils

//
// Imports
//
import (
    "fmt"
    "io/ioutil"
    "os"

    "../ndefence_io"
    "../ndefence_server"
)

// Generate a configuration file based on the provided data
/*
 * @param    string      /path/to/config
 * @param    string      server type (nginx, apache2, etc)
 * @param    string[]    list of IPv4 addressess to consider blocking
 * @param    string      Datetime, as a string
 *
 * @return   error       error message, if any
 */
func Generate_config(default_site_config_path string,
  serverType string, blocked_ips []string, datetime string) (error) {

    // input validation
    if len(default_site_config_path) < 1 || len(serverType) < 1 ||
      len(datetime) < 1 {
        return nil;
    }

    // Variables to hold the header / contents of the default site config
    var new_default_site_config_header string = ""
    var new_default_site_config_contents string = ""

    // 
    // Nginx server
    // 
    if serverType == "nginx" {

        // Attempt to break up the file into an array of strings a demarked by
        // the newline character.
        site_config_data, err := ndefence_io.TokenizeFile(
          default_site_config_path, "\n")

        // if an error occurs, terminate from the program
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }

        // reading from the above config string data, attempt to convert
        // the string data to a list of servers
        list_of_servers, err := ndefence_server.ConvertStringsToServers(site_config_data)

        // if an error occurs, terminate from the program
        if err != nil {
            fmt.Println(err)
            os.Exit(1)
        }

        // if there is at least one server...
        for _, server := range list_of_servers {

            // verify that the server block was read properly
            if len(server.Server_name) < 1 || len(server.Listen) < 1 {

                // else skip to the next element
                continue
            }

            // if the server block looks good, go ahead and append it
            // to a string
            output, err := ndefence_server.ConvertServerToString(server)

            // if an error occurred, skip to the next element
            if err != nil {
                continue
            }

            // append the output to the config contents
            if len(output) > 0 {
                new_default_site_config_contents += output
            }
        }

        // if there is at least one line of server config data appended...
        if len(new_default_site_config_contents) > 0 {

            // append the time and date the config was generated
            new_default_site_config_header += "#\n"
            new_default_site_config_header += "# Nginx Config\n"
            new_default_site_config_header += "#\n"
            new_default_site_config_header += "# Generated by" +
              "ndefence.\n"
            new_default_site_config_header += "#\n"
            new_default_site_config_header += "# Date: " + datetime +
              "\n"
            new_default_site_config_header += "#\n"

            // attach the header to the config contents
            new_default_site_config_contents =
              new_default_site_config_header + new_default_site_config_contents

            // attempt to write it to the file in question
            err = ioutil.WriteFile(default_site_config_path,
                                   []byte(new_default_site_config_contents),
                                   0644)

            // if an error occurs, terminate from the program
            if err != nil {
                return err
            }

            // have the server restart as well
            _, err := RunNginxReloadCommand()

            // if an error occurs, terminate from the program
            if err != nil {
                return err
            }
        }

    //
    // Apache2 server
    //
    } else if serverType == "apache" {

        // Attempt to break up the file into an array of strings a demarked by
        // the newline character.
        site_config_data, err := ndefence_io.TokenizeFile(
          default_site_config_path, "\n")

        // if an error occurs, terminate from the program
        if err != nil {
            return err
        }

      // TODO: consider implementing this if it is ever needed
      site_config_data = site_config_data
    }

    // everything worked fine
    return nil
}
